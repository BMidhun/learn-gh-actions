name: 12 - Working with Outputs 
# Outputs are named values passed between workflow steps or returned to calling workflows.
on:
    workflow_dispatch: 
        inputs:
            build-status:
                type: choice
                options:
                    - success
                    - failure
                default: success
jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            build-status: ${{ steps.build.outputs.status }}
            output1: ${{ steps.build.outputs.output1 }}
            output2: ${{ steps.build.outputs.output2 }}
            mistake: ${{ steps.build.outputs.mistake }}

        # steps don't share the same output file
        steps:
            - name: Print GITHUB_OUTPUT path
              run: echo "$GITHUB_OUTPUT"
            
            - name: Build
            #  we need an id to access the output defined in a step
              id: build
              run: |
                 echo "$GITHUB_OUTPUT" 
                 echo "status=${{ inputs.build-status }}" >> "$GITHUB_OUTPUT" 
                 echo "output1=value1" >> "$GITHUB_OUTPUT"
                 echo "output2=value2" >> "$GITHUB_OUTPUT"
                 cat $GITHUB_OUTPUT
                #  echo "mistake=value" > "$GITHUB_OUTPUT"
            # echo "mistake=value" > "$GITHUB_OUTPUT" this command actually overrides everything on GITHUB_OUTPUT file. Hence deploy job will be skipped as build-status output value is undefined
            
            - name: mistake step
              run: |
                echo $GITHUB_OUTPUT
                echo "mistake=true" >> "$GITHUB_OUTPUT"
                cat $GITHUB_OUTPUT

    deploy:
        runs-on: ubuntu-latest
        needs: 
            - build
        if: ${{ needs.build.outputs.build-status == 'success' }}
        steps:
            - name: Deploy
              run: | 
                echo "Deploying"
                echo "Output value - Build Status = ${{ needs.build.outputs.build-status }}"
                echo "Output value - Output1 = ${{ needs.build.outputs.output1 }}"
                echo "Output value - Output2 = ${{ needs.build.outputs.output2 }}"
                echo "Output value - Mistake = ${{ needs.build.outputs.mistake }}"


              
